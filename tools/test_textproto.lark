// SPDX-Copyright: Copyright (c) Capital One Services, LLC
// SPDX-License-Identifier: Apache-2.0
// Copyright 2020 Capital One Services, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.


// A textproto grammar for the test cases for CEL in the cel-spec conformance suite.
// This embeds the message protobuf definitions into a grammar.
// See https://github.com/google/cel-spec/blob/master/proto/test/v1/simple.proto
// This imports additional protobuf definitions from https://github.com/googleapis/googleapis
// https://github.com/googleapis/googleapis/blob/master/google/api/expr/v1alpha1/value.proto
// https://github.com/googleapis/googleapis/blob/master/google/api/expr/v1alpha1/checked.proto
// https://github.com/googleapis/googleapis/blob/master/google/api/expr/v1alpha1/eval.proto
// These depend on profobuf foundational definitions:
// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Any
// https://github.com/protocolbuffers/protobuf/tree/master/src/google/protobuf

// Currently, this is an ad-hoc definition sufficient to parse all the text-proto examples.

// TODO: Translate the protobuf definitions from cel-spec and googleapis repositories into
// a grammar that better reflects the source structure and semantics.

// TODO: Resolve WARNING:root:Shift/Reduce conflict for terminal FIELDS: (resolving as shift)
// WARNING:root: * <fields_clause : __struct_value_clause_star_8>

start : feature

// https://github.com/google/cel-spec/blob/master/proto/test/v1/simple.proto
// message SimpleTestFile
feature : (feature_name | feature_description | feature_section)+

feature_name : "name" ":" value
feature_description : "description" ":" value
feature_section: "section" "{" section "}"

// https://github.com/google/cel-spec/blob/master/proto/test/v1/simple.proto
// message SimpleTestSection
section : (section_name | section_description | section_test)+

section_name : "name" ":" value
section_description : "description" ":" value
section_test : "test" "{" test "}"

// https://github.com/google/cel-spec/blob/master/proto/test/v1/simple.proto
// message SimpleTest
test : (test_name | test_description | test_expr
       | test_disable_macros | test_disable_check
       | test_type_env | test_container | test_bindings
       | test_value | test_eval_error)+

test_name : "name" ":" value
test_description : "description" ":" value
test_expr : "expr" ":" value
test_disable_macros : "disable_macros" ":" value
test_disable_check : "disable_check" ":" value
test_type_env : "type_env" ":"? "{" type_env_name type_env_ident "}"
test_container : "container" ":" value
test_bindings : "bindings" ":"? "{" bindings+ "}"
test_value : "value" ":"? "{" value_clause "}"
test_eval_error : "eval_error" ":"? "{" eval_error+ "}"


// https://github.com/googleapis/googleapis/blob/master/google/api/expr/v1alpha1/value.proto
// message Value
?value_clause : single_value | list_value_clause | map_value_clause | type_value_clause
    | object_value_clause   // should be protobuf.Any, seems to be more general.
    | struct_value_clause   // protobuf.Struct
    | fields_clause
    | single_value_clause
    | type_wrapper_clause
    | special_value_clause

single_value : TYPE_NAME ":" value
object_value_clause : "object_value" ":"? "{" object_value "}"
list_value_clause   : "list_value" ":"? "{" list_value* "}"
map_value_clause    : "map_value" ":"? "{" entries* "}"
type_value_clause   : "type_value" ":"? STRING

// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto
struct_value_clause : "struct_value" ":"? "{" fields_clause* "}"
fields_clause : "fields" "{" key_value ~ 2 "}"

single_value_clause : "single_value" ":"? "{" value_clause "}"
type_wrapper_clause : WRAPPER ":"? "{" value_clause? "}"
special_value_clause : "value" ":" value | "seconds" ":" value | "nanos" ":" value

// Unsure where this is defined...
object_value : "[" NAMESPACE "]" "{" value_clause+ "}"
    | "[" NAMESPACE "]" "{" type_url "}"
    | "[" NAMESPACE "]" "{" list_value* "}"
    | "[" NAMESPACE "]" "{" "single_struct" "{" fields_clause* "}" "}"
    | "[" NAMESPACE "]" "{" "single_any" "{" [object_value | type_url] "}" "}"
    | "[" NAMESPACE "]" "{" PROTOBUF_TYPE ":"? ["{" value_clause "}" | value] "}"

// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Any
type_url : "type_url" ":" STRING "value" ":" value

// https://github.com/googleapis/googleapis/blob/master/google/api/expr/v1alpha1/value.proto
list_value : "values" ":"? "{" value_clause "}"
entries : "entries" "{" key_value ~ 2 "}"
?key_value : key_value_key | key_value_value
key_value_key : "key" ":"? "{" single_value "}"
    | "key" ":" value
key_value_value : "value" ":"? "{" single_value "}"

eval_error : "errors" ":"? "{" "message" ":" value "}"

?type_env : type_env_name | type_env_ident
type_env_name : "name" ":" value ","?
type_env_ident : "ident" ":"? "{" type_name "}"

// message Type
type_name : "type" ":"? "{" type_spec "}"

// TODO: Expand these into separate rules for each case.
type_spec : "primitive" ":" TYPE
    | "message_type" ":" STRING
    | "null" ":" TYPE  // NULL_VALUE
    | "map_type" ":" "{" map_type_spec "}"
    | "list_type" ":" "{" type_spec "}"
    | "elem_type" ":" "{" type_spec "}"
map_type_spec : "key_type" ":" "{" type_spec "}" "value_type" ":" "{" type_spec "}"

?bindings : binding_key | binding_value
binding_key : "key" ":"? value ","?
binding_value : "value" ":"? "{" value_clause "}"
    | "value" ":"? "{" "value" ":"? "{" value_clause "}" "}"  // Ugh. There should be a better fix.

namespace : "[" NAMESPACE "]"

value : INT | FLOAT | STRING | NULL | BOOL | TYPE

WRAPPER : "single_int32_wrapper" | "single_int64_wrapper"
    | "single_uint32_wrapper" | "single_uint64_wrapper"
    | "single_float_wrapper" | "single_double_wrapper"
    | "single_bool_wrapper"
    | "single_string_wrapper" | "single_bytes_wrapper"

TYPE_NAME : "int64_value" | "null_value" | "uint64_value" | "double_value" | "bool_value" | "string_value"
    | "bytes_value" | "number_value"

PROTOBUF_TYPE : "single_int64" | "single_int32" | "single_uint64" | "single_uint32"
    | "single_sint64" | "single_sint32" | "single_fixed64" | "single_fixed32"
    | "single_sfixed32" | "single_sfixed64" | "single_float" | "single_double"
    | "single_bool" | "single_string" | "single_bytes"
    | "single_duration" | "single_timestamp"

NAME : /\w+/

INT : /[+-]?\d+/

FLOAT : /[+-]?\d+\.\d*([eE][+-]?\d+)?/ | /[+-]?\d+[eE][+-]?\d+/ | "Infinity" | "inf" | "-inf"

STRING : /"[^"\n\\]*((\\.)+[^"\n\\]*)*("|\\?$)/ | /'[^'\n\\]*((\\.)+[^'\n\\]*)*('|\\?$)/

NULL : "NULL_VALUE"

BOOL : "true" | "false"

TYPE : "INT64" | "BOOL" | "BYTES" | "DOUBLE" | "STRING" | "NULL_VALUE" | "UINT64"

NAMESPACE : /[\w\.\/:-]+/

COMMENT : /#.*/

WHITESPACE : /\s+/

%ignore COMMENT
%ignore WHITESPACE
